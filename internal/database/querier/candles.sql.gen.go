// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: candles.sql

package querier

import (
	"context"
	"time"
)

const getCandles = `-- name: GetCandles :many
SELECT pair, start, price_open, price_close, price_low, price_high, volume FROM candles WHERE pair = $1 AND start >= $2 AND start < $3
`

type GetCandlesParams struct {
	Pair      string
	StartTime time.Time
	EndTime   time.Time
}

func (q *Queries) GetCandles(ctx context.Context, arg GetCandlesParams) ([]*Candle, error) {
	rows, err := q.db.Query(ctx, getCandles, arg.Pair, arg.StartTime, arg.EndTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Candle
	for rows.Next() {
		var i Candle
		if err := rows.Scan(
			&i.Pair,
			&i.Start,
			&i.PriceOpen,
			&i.PriceClose,
			&i.PriceLow,
			&i.PriceHigh,
			&i.Volume,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestCandle = `-- name: GetLatestCandle :one
SELECT start FROM candles WHERE pair = $1
ORDER BY start DESC  LIMIT 1
`

func (q *Queries) GetLatestCandle(ctx context.Context, pair string) (time.Time, error) {
	row := q.db.QueryRow(ctx, getLatestCandle, pair)
	var start time.Time
	err := row.Scan(&start)
	return start, err
}

type InsertCandlesParams struct {
	Pair       string
	Start      time.Time
	PriceOpen  float64
	PriceClose float64
	PriceLow   float64
	PriceHigh  float64
	Volume     float64
}
